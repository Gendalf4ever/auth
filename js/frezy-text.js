// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ñ—Ä–µ–∑ –∏–∑ Firebase

let frezyTextData = [];
let productsDb = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async function initializeFrezyText() {
    console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–¢–†–ê–ù–ò–¶–´ –§–†–ï–ó ===');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º Firestore –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        productsDb = window.getProductsFirestore();
        console.log('Firestore –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω');
        
        await loadFrezyTextFromFirebase();
        displayFrezyTextProducts();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ—Ä–µ–∑–∞—Ö');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–µ–∑ –∏–∑ Firebase
async function loadFrezyTextFromFirebase() {
    console.log('=== –ó–ê–ì–†–£–ó–ö–ê –§–†–ï–ó –ò–ó FIREBASE ===');
    
    try {
        const snapshot = await productsDb.collection('products').get();
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${snapshot.size} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ Firebase`);
        
        const allProducts = [];
        snapshot.forEach(doc => {
            allProducts.push({
                id: doc.id,
                ...doc.data()
            });
        });
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ—Ä–µ–∑—ã, –∏—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        frezyTextData = allProducts.filter(product => {
            const name = (product.name || product.–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ || '').toLowerCase();
            const category = (product.category || product.–∫–∞—Ç–µ–≥–æ—Ä–∏—è || '').toLowerCase();
            const description = (product.description || product.–æ–ø–∏—Å–∞–Ω–∏–µ || '').toLowerCase();
            const tags = (product.tags || product.—Ç–µ–≥–∏ || '').toLowerCase();
            
            // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            const isUnwanted = 
                name.includes('medit') ||
                name.includes('shining') ||
                name.includes('–≤–∞–Ω–Ω–∞') ||
                name.includes('—Å–∫–∞–Ω–µ—Ä') ||
                name.includes('scanner') ||
                name.includes('3d —Å–∫–∞–Ω–µ—Ä') ||
                name.includes('3d scanner') ||
                category.includes('—Å–∫–∞–Ω–µ—Ä') ||
                category.includes('scanner') ||
                tags.includes('—Å–∫–∞–Ω–µ—Ä') ||
                tags.includes('scanner') ||
                description.includes('—Å–∫–∞–Ω–µ—Ä') ||
                description.includes('scanner');
            
            if (isUnwanted) {
                console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä: ${name}`);
                return false;
            }
            
            // –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Ñ—Ä–µ–∑ (–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —á–µ–º –¥–ª—è —Å—Ç–∞–Ω–∫–æ–≤)
            const isFreza = 
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category === '—Ñ—Ä–µ–∑—ã' ||
                category === '—Ñ—Ä–µ–∑–∞' ||
                category === 'burrs' ||
                category === 'burs' ||
                category === 'drill' ||
                category === 'drills' ||
                category === '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã' ||
                category === '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç' ||
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥–∏
                tags.includes('—Ñ—Ä–µ–∑–∞') ||
                tags.includes('—Ñ—Ä–µ–∑—ã') ||
                tags.includes('burr') ||
                tags.includes('bur') ||
                tags.includes('drill') ||
                tags.includes('–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç') ||
                tags.includes('—Ä–µ–∂—É—â–∏–π') ||
                tags.includes('—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π') ||
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–∫–∏)
                (name.includes('—Ñ—Ä–µ–∑') && !name.includes('—Å—Ç–∞–Ω–æ–∫') && !name.includes('–º–∞—à–∏–Ω')) ||
                name.includes('burr') ||
                name.includes('bur ') ||
                name.includes('drill') ||
                name.includes('–±–æ—Ä') ||
                name.includes('—Å–≤–µ—Ä–ª') ||
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                (description.includes('—Ñ—Ä–µ–∑') && !description.includes('—Å—Ç–∞–Ω–æ–∫')) ||
                description.includes('burr') ||
                description.includes('—Ä–µ–∂—É—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç') ||
                description.includes('—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç');
            
            if (isFreza) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ—Ä–µ–∑–∞: ${name}`);
                console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}`);
                console.log(`   –¢–µ–≥–∏: ${tags}`);
            } else {
                console.log(`‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—Ä–µ–∑–æ–π: ${name} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category})`);
            }
            
            return isFreza;
        });
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${frezyTextData.length} —Ñ—Ä–µ–∑ –∏–∑ ${allProducts.length} –æ–±—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
        
        if (frezyTextData.length === 0) {
            console.warn('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ñ—Ä–µ–∑—ã');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–µ–∑:', error);
        throw error;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ—Ä–µ–∑
function displayFrezyTextProducts() {
    console.log('=== –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –§–†–ï–ó ===');
    
    const container = document.getElementById('frezy-text-products-container');
    if (!container) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä frezy-text-products-container –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    if (frezyTextData.length === 0) {
        container.innerHTML = `
            <div class="alert alert-info text-center">
                <i class="fas fa-info-circle fa-2x mb-3"></i>
                <h5>–§—Ä–µ–∑—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</h5>
                <p class="mb-0">–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∫–∞—Ç–∞–ª–æ–≥ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ñ—Ä–µ–∑</p>
            </div>
        `;
        return;
    }
    
    let productsHTML = '<div class="row">';
    
    frezyTextData.forEach(product => {
        const productCard = createFrezyTextProductCard(product);
        productsHTML += productCard;
    });
    
    productsHTML += '</div>';
    container.innerHTML = productsHTML;
    
    console.log(`–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ ${frezyTextData.length} —Ñ—Ä–µ–∑`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ—Ä–µ–∑—ã –≤ —Å—Ç–∏–ª–µ —Ü–∏—Ä–∫–æ–Ω–∏–µ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
function createFrezyTextProductCard(product) {
    const name = product.name || product.–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    const fullDescription = product.description || product.–æ–ø–∏—Å–∞–Ω–∏–µ || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    
    // –°–æ–∫—Ä–∞—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ –ø–µ—Ä–≤—ã—Ö 50 —Å–∏–º–≤–æ–ª–æ–≤ + "..."
    const shortDescription = fullDescription.length > 50 
        ? fullDescription.substring(0, 50) + '...' 
        : fullDescription;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    let imageHTML = '';
    const imageUrl = product.img_url || product.image_url || product.–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ || product.–∫–∞—Ä—Ç–∏–Ω–∫–∞;
    
    if (imageUrl) {
        imageHTML = `<img src="${imageUrl}" class="frezy-text-product-image" alt="${name}">`;
    } else {
        imageHTML = `
            <div class="frezy-text-product-placeholder">
                <i class="fas fa-tools"></i>
            </div>
        `;
    }
    
    return `
        <div class="col-md-6 col-lg-4 mb-4">
            <div class="frezy-text-product-card">
                <div class="frezy-text-image-container">
                    ${imageHTML}
                </div>
                <h5 class="frezy-text-product-title">${name}</h5>
                <p class="frezy-text-product-description">${shortDescription}</p>
                <button class="btn btn-outline-primary frezy-text-details-btn" onclick="showFrezyTextProductDetails('${product.id}')">
                    <i class="fas fa-info-circle me-2"></i>–ü–æ–¥—Ä–æ–±–Ω–µ–µ
                </button>
            </div>
        </div>
    `;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞ (–ø–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª—è—Ö)
function getProductSpecifications(product) {
    console.log('üîç –ò—â–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞:', product.name || product.–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ);
    
    // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    const specsFields = [
        'specifications', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', 'specs', '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
        'characteristics', 'techSpecs', 'technicalSpecs', 
        'parameters', '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã', 'features', '—Å–≤–æ–π—Å—Ç–≤–∞', 'properties'
    ];
    
    // –ò—â–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –ø—Ä—è–º—ã—Ö –ø–æ–ª—è—Ö
    for (const field of specsFields) {
        if (product[field]) {
            const value = product[field];
            if (typeof value === 'string' && value.trim()) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –ø–æ–ª–µ "${field}"`);
                return value.trim();
            }
            if (typeof value === 'object' && value !== null) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏-–æ–±—ä–µ–∫—Ç –≤ –ø–æ–ª–µ "${field}"`);
                return value;
            }
        }
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    const allKeys = Object.keys(product);
    for (const key of allKeys) {
        const keyLower = key.toLowerCase();
        if (keyLower.includes('—Ö–∞—Ä–∞–∫—Ç') || keyLower.includes('spec') || 
            keyLower.includes('–ø–∞—Ä–∞–º–µ—Ç—Ä') || keyLower.includes('—Å–≤–æ–π—Å—Ç–≤')) {
            const value = product[key];
            if (value && (typeof value === 'string' || typeof value === 'object')) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –ø–æ–ª–µ "${key}"`);
                return value;
            }
        }
    }
    
    return '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã';
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function formatSpecifications(specs) {
    if (!specs || specs === '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã') {
        return '<p class="text-muted">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã</p>';
    }
    
    // –ï—Å–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ - —ç—Ç–æ –æ–±—ä–µ–∫—Ç
    if (typeof specs === 'object' && !Array.isArray(specs)) {
        const specsList = Object.entries(specs).map(([key, value]) => {
            return `<div class="spec-item"><strong>${key}:</strong> ${value}</div>`;
        }).join('');
        return specsList || '<p class="text-muted">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã</p>';
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    const specsStr = String(specs);
    const lines = specsStr.split('\n').filter(line => line.trim());
    
    if (lines.length === 0) {
        return '<p class="text-muted">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã</p>';
    }
    
    const formattedLines = lines.map(line => {
        line = line.trim();
        if (line.includes(':')) {
            const parts = line.split(':');
            const key = parts[0].trim();
            const value = parts.slice(1).join(':').trim();
            return `<div class="spec-item"><strong>${key}:</strong> ${value}</div>`;
        } else {
            return `<div class="spec-item">${line}</div>`;
        }
    }).join('');
    
    return formattedLines;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ñ—Ä–µ–∑—ã
function showFrezyTextProductDetails(productId) {
    const product = frezyTextData.find(p => p.id === productId);
    if (!product) {
        console.error('–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', productId);
        return;
    }
    
    const name = product.name || product.–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    const description = product.description || product.–æ–ø–∏—Å–∞–Ω–∏–µ || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    const specifications = getProductSpecifications(product);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    let modalImageHTML = '';
    const imageUrl = product.img_url || product.image_url || product.–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ || product.–∫–∞—Ä—Ç–∏–Ω–∫–∞;
    
    if (imageUrl) {
        modalImageHTML = `<img src="${imageUrl}" class="frezy-text-modal-image mb-3" alt="${name}" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">`;
    }
    
    const modalPlaceholderHTML = `
        <div class="frezy-text-modal-image-placeholder mb-3" ${imageUrl ? 'style="display: none;"' : ''}>
            <i class="fas fa-tools"></i>
        </div>
    `;
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modalHTML = `
        <div class="modal fade" id="frezyTextProductModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">${name}</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="text-center">
                            ${modalImageHTML}
                            ${modalPlaceholderHTML}
                        </div>
                        <div class="specs-detail">
                            <h6><i class="fas fa-info-circle me-2"></i>–û–ø–∏—Å–∞–Ω–∏–µ</h6>
                            <p>${description}</p>
                            
                            <h6><i class="fas fa-cogs me-2"></i>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h6>
                            <div class="specifications-content">
                                ${formatSpecifications(specifications)}
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingModal = document.getElementById('frezyTextProductModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = new bootstrap.Modal(document.getElementById('frezyTextProductModal'));
    modal.show();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
function showError(message) {
    const container = document.getElementById('frezy-text-products-container');
    if (container) {
        container.innerHTML = `
            <div class="alert alert-danger text-center">
                <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                <h5>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h5>
                <p class="mb-0">${message}</p>
            </div>
        `;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ—Ä–µ–∑');
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Firebase
    setTimeout(() => {
        initializeFrezyText();
    }, 1000);
});
